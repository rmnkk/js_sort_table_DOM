{"version":3,"sources":["scripts/main.js"],"names":["tBody","document","querySelector","tableHead","tableHeaders","children","rows","querySelectorAll","toNumber","value","Number","replace","split","join","sortTable","tblBody","columnIndex","sortedRows","sort","a","b","aColumnText","textContent","trim","bColumnText","includes","isNaN","parseInt","localeCompare","firstChild","removeChild","append","addEventListener","ev","headerIndex","indexOf","target"],"mappings":";AAAA,aA4CA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA1CA,IAAMA,EAAQC,SAASC,cAAc,SAE/BC,EAAYF,SAASC,cAAc,SAEnCE,EAAmBD,EAAAA,EAAUE,SAAS,GAAGA,UAEzCC,EAAWN,EAAAA,EAAMO,iBAAiB,OAExC,SAASC,EAASC,GACTC,OAAAA,OAAOD,EACXE,QAAQ,MAAO,IACfC,MAAM,KACNC,KAAK,KAGV,SAASC,EAAUC,EAASC,GAoBnBD,IAnBDE,IAAAA,EAAaX,EAAKY,KAAK,SAACC,EAAGC,GACzBC,IAAAA,EAAcF,EAAEd,SAASW,GAC5BM,YACAC,OACGC,EAAcJ,EAAEf,SAASW,GAC5BM,YACAC,OAECF,OAAAA,EAAYI,SAAS,KAChBjB,EAASa,GAAeb,EAASgB,GAGrCE,MAAMC,SAASN,IAIbA,EAAYO,cAAcJ,GAHxBG,SAASN,GAAeM,SAASH,KAMrCT,EAAQc,YACbd,EAAQe,YAAYf,EAAQc,YAG9Bd,EAAQgB,OAARhB,MAAAA,EAAkBE,EAAAA,IAGpBd,EAAU6B,iBAAiB,QAAS,SAAAC,GAC5BC,IAAAA,EAAc9B,EAAa+B,QAAQF,EAAGG,QAE5CtB,EAAUd,EAAOkC","file":"main.8d50f112.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tBody = document.querySelector('tbody');\n\nconst tableHead = document.querySelector('thead');\n\nconst tableHeaders = [...tableHead.children[0].children];\n\nconst rows = [...tBody.querySelectorAll('tr')];\n\nfunction toNumber(value) {\n  return Number(value\n    .replace(/\\$/g, '')\n    .split(',')\n    .join(''));\n}\n\nfunction sortTable(tblBody, columnIndex) {\n  const sortedRows = rows.sort((a, b) => {\n    const aColumnText = a.children[columnIndex]\n      .textContent\n      .trim();\n    const bColumnText = b.children[columnIndex]\n      .textContent\n      .trim();\n\n    if (aColumnText.includes('$')) {\n      return toNumber(aColumnText) - toNumber(bColumnText);\n    }\n\n    if (!isNaN(parseInt(aColumnText))) {\n      return parseInt(aColumnText) - parseInt(bColumnText);\n    }\n\n    return aColumnText.localeCompare(bColumnText);\n  });\n\n  while (tblBody.firstChild) {\n    tblBody.removeChild(tblBody.firstChild);\n  }\n\n  tblBody.append(...sortedRows);\n}\n\ntableHead.addEventListener('click', ev => {\n  const headerIndex = tableHeaders.indexOf(ev.target);\n\n  sortTable(tBody, headerIndex);\n});\n"]}